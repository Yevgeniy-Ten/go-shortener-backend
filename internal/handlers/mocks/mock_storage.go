// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/storage.go

// Package handlers_mocks is a generated GoMock package.
package handlers_mocks

import (
	reflect "reflect"
	domain "shorter/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockurlStorage is a mock of urlStorage interface.
type MockurlStorage struct {
	ctrl     *gomock.Controller
	recorder *MockurlStorageMockRecorder
}

// MockurlStorageMockRecorder is the mock recorder for MockurlStorage.
type MockurlStorageMockRecorder struct {
	mock *MockurlStorage
}

// NewMockurlStorage creates a new mock instance.
func NewMockurlStorage(ctrl *gomock.Controller) *MockurlStorage {
	mock := &MockurlStorage{ctrl: ctrl}
	mock.recorder = &MockurlStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlStorage) EXPECT() *MockurlStorageMockRecorder {
	return m.recorder
}

// DeleteURLs mocks base method.
func (m *MockurlStorage) DeleteURLs(correlationIDS []string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLs", correlationIDS, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockurlStorageMockRecorder) DeleteURLs(correlationIDS, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockurlStorage)(nil).DeleteURLs), correlationIDS, userID)
}

// GetURL mocks base method.
func (m *MockurlStorage) GetURL(shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockurlStorageMockRecorder) GetURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockurlStorage)(nil).GetURL), shortURL)
}

// GetUserURLs mocks base method.
func (m *MockurlStorage) GetUserURLs(userID int, serverAdr string) ([]domain.UserURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", userID, serverAdr)
	ret0, _ := ret[0].([]domain.UserURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockurlStorageMockRecorder) GetUserURLs(userID, serverAdr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockurlStorage)(nil).GetUserURLs), userID, serverAdr)
}

// Save mocks base method.
func (m *MockurlStorage) Save(value string, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockurlStorageMockRecorder) Save(value, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockurlStorage)(nil).Save), value, userID)
}

// SaveBatch mocks base method.
func (m *MockurlStorage) SaveBatch(urls []domain.URLS, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockurlStorageMockRecorder) SaveBatch(urls, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockurlStorage)(nil).SaveBatch), urls, userID)
}

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserStorage) Create() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuserStorageMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserStorage)(nil).Create))
}
